using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Immutable;
using System.Text;

namespace GalArc.Generator;

[Generator]
internal class ArcFormatGenerator : IIncrementalGenerator
{
    private const string ArcFormatBaseName = "GalArc.Models.Formats.Commons";
    private const string ArcFormatFullName = "GalArc.Models.Formats.Commons.ArcFormat";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        IncrementalValuesProvider<INamedTypeSymbol> classDeclarations = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (s, _) => s is ClassDeclarationSyntax c && c.BaseList is not null,
                transform: static (ctx, _) =>
                {
                    ClassDeclarationSyntax classDeclaration = (ClassDeclarationSyntax)ctx.Node;
                    return ctx.SemanticModel.GetDeclaredSymbol(classDeclaration) is INamedTypeSymbol symbol ? symbol : null;
                })
            .Where(static m => m is not null)!;

        IncrementalValuesProvider<INamedTypeSymbol> foundImplementations = classDeclarations
            .Where(classSymbol =>
            {
                if (classSymbol.IsAbstract)
                    return false;

                INamedTypeSymbol baseType = classSymbol.BaseType;
                while (baseType != null)
                {
                    if (baseType.ToDisplayString() == ArcFormatFullName)
                    {
                        return true;
                    }
                    baseType = baseType.BaseType;
                }
                return false;
            });

        IncrementalValueProvider<ImmutableArray<INamedTypeSymbol>> collected = foundImplementations.Collect();

        context.RegisterSourceOutput(collected, (spc, source) =>
        {
            if (source.IsDefaultOrEmpty)
            {
                return;
            }

            ImmutableArray<string> classNames = [.. source.Select(s => s.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat))];

            string sourceCode = GenerateSource(classNames);
            spc.AddSource("ArcFormatProvider.g.cs", sourceCode);
        });
    }

    private static string GenerateSource(ImmutableArray<string> formatClassNames)
    {
        StringBuilder sb = new();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine();
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine();
        sb.AppendLine($"namespace {ArcFormatBaseName}");
        sb.AppendLine("{");
        sb.AppendLine("    internal static partial class ArcFormatProvider");
        sb.AppendLine("    {");
        sb.AppendLine("        private static IEnumerable<ArcFormat> LoadFormatsGenerated()");
        sb.AppendLine("        {");
        for (int i = 0; i < formatClassNames.Length; i++)
        {
            sb.AppendLine($"            var format_{i} = new {formatClassNames[i]}();");
            sb.AppendLine($"            if (format_{i}.CanFind)");
            sb.AppendLine("            {");
            sb.AppendLine($"                yield return format_{i};");
            sb.AppendLine("            }");
        }
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("}");

        return sb.ToString();
    }
}
